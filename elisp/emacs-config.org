#+TITLE: Ben's Emacs Configuration

* Prologue

Flycheck wants all this stuff to appear at the beginning of an emacs-lisp file. I might as well indulge it. Having this as the first block in the file makes it appear at the top of the file when tangled.

#+BEGIN_SRC emacs-lisp
  ;;; emacs-config.org --- Ben's Emacs Configuration
  ;;; Commentary:
  ;;;    This file contains extensive commentary.
  ;;; Code:
#+END_SRC

* Basic Emacs Options

Set up some very basic Emacs behavior options: no startup message/screen, no initial contents in scratch buffer, don't beep, etc.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-screen t
        initial-scratch-message nil
        ring-bell-function 'ignore
        use-dialog-box nil
        column-number-mode t
        line-number-mode nil
        scroll-conservatively 500
        enable-recursive-minibuffers t
        minibuffer-max-depth nil
        goto-address-highlight-p t
        next-line-add-newlines nil
        normal-erase-is-backspace nil
        custom-safe-themes t
        vc-follow-symlinks t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)
  (set-scroll-bar-mode nil)

  (setq-default line-move-visual nil)

  (put 'eval-expression 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)

  (winner-mode t)
  (show-paren-mode)
  (delete-selection-mode)

  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (setenv "LANG" "en_US.UTF-8")
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)

  (setq-default indicate-empty-lines t)
#+END_SRC

Set up the default window size.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(width  . 100))
  (add-to-list 'default-frame-alist '(height .  50))
#+END_SRC

** Miscellaneous packages and prefs

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (customize-set-variable 'package-archives
                          '(("melpa-stable" . "http://stable.melpa.org/packages/")
                            ))
  (package-initialize)

  (when (not package-archive-contents)
    (package-refresh-contents))

  ;; manually install use-package package manager
  (when (not (package-installed-p 'use-package))
    (package-install 'use-package))

  ;; configure use-package
  (setq use-package-always-ensure t)  ;; always download and install packages
  (setq use-package-always-pin "melpa-stable")  ;; prefer stable
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
  (use-package ido
    :config
    (ido-mode t))
  (use-package flx-ido)
  (use-package hl-line
    :config
    (global-hl-line-mode 1))
  (use-package midnight
    :defer 3
    :config
    (setq midnight-period 7200)
    (midnight-mode 1))
  (use-package subword
    :config
    (global-subword-mode 1))
  (use-package solarized-theme)
  (use-package cmake-mode)
  (use-package go-mode)
  (use-package json-mode)
  (use-package markdown-mode)
  (use-package php-mode)
  (use-package swift-mode)
  (use-package typescript-mode)
  (use-package yaml-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-globalized-minor-mode my-global-goto-address-mode goto-address-mode
    (lambda () (goto-address-mode 1)))
  (my-global-goto-address-mode 1)
  (setq goto-address-highlight-p t)
#+END_SRC

** Making Backups

Emacs likes to make backup files, in ~filename~~ files. This is fine, but inside a version-controlled (git) directory, it's overkill. Also in ~/tmp~ or other temp directories.

#+BEGIN_SRC emacs-lisp
  ;; Determines whether a file is in a git repo.
  (defun is-file-under-git (fpath)
    "Return t if FPATH is under Git control, nil otherwise."
    (let ((dirname (if (file-directory-p fpath) fpath
                     (substring (file-name-directory fpath) 0
                                (1- (length (file-name-directory fpath))))))
          (lastdir nil)
          (foundit nil)
          (gitdir nil))
      (while (not (or foundit (string= dirname "") (string= dirname lastdir)))
        (setq gitdir (concat dirname "/.git"))
        (if (file-directory-p gitdir)
            (setq foundit t)
          (setq lastdir dirname)
          (setq dirname (file-name-directory dirname))
          (setq dirname (substring dirname 0 (1- (length dirname))))))
      foundit))

  ;; Emacs 19 and later uses this predicate to determine,
  ;; based on a file's name, whether to make a backup.
  ;; This function avoids making backups of files in /tmp and /usr/tmp.
  (setq backup-enable-predicate
        '(lambda (name)
           (cond ((< (length name) 5) t)
                 ((string-equal "/tmp/" (substring name 0 5)) nil)
                 ((< (length name) 9) t)
                 ((string-equal "/usr/tmp/" (substring name 0 9)) nil)
                 ((is-file-under-git name) nil)
                 (t))))

  ;; Except just don't.
  (setq make-backup-files nil)
#+END_SRC

** Customizations

Load my customizations.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" bcox-elisp-dir))
  (load-file custom-file)
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind
     ("C-c l" . org-store-link)
     ("C-c C-l" . org-insert-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture)
     :custom
     (org-startup-indented t)
     (org-confirm-babel-evaluate nil)
     (org-src-fontify-natively t)
     (org-src-tab-acts-natively t)
     (org-hide-emphasis-markers t)
     (org-tags-column 0)
     (org-special-ctrl-a/e t)
     (org-agenda-sticky t)
     (org-agenda-todo-ignore-scheduled 'future)
     :hook
     (org-babel-after-execute . org-redisplay-inline-images)
     (org-mode . visual-line-mode)
       :config
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (haskell . t)
        (ditaa . t)
        (shell . t)
        (plantuml . t)
        (dot . t)
        (js . t)))
     (setq org-default-notes-file (concat org-directory "/notes.org")
           org-agenda-include-diary t
           diary-file (concat org-directory "/diary")
           org-agenda-files (list org-default-notes-file
                                  (concat org-directory "/work.org")
                                  (concat org-directory "/agenda.org"))
           org-link-abbrev-alist '(("google" . "http://www.google.com/search?q="))
           org-tag-alist '(("BUG" . ?G)
                           (:startgroup . nil)
                           ("Work" . ?W) ("Personal" . ?P) ("SPM" . ?S)
                           (:endgroup . nil))
           org-drawers '("PROPERTIES" "CLOCK" "LOGBOOK" "RESULTS" "NOTES")))
#+END_SRC

* Programming Mode Stuff
** ~TODO~ Comments 

I like to highlight ~TODO~ comments in my code.

#+BEGIN_SRC emacs-lisp
  (make-face 'bcox-todo-face)
  (set-face-foreground 'bcox-todo-face "#cb4b16")
  (font-lock-add-keywords 'c++-mode '(("// *\\(TODO.*$\\)" 1 'bcox-todo-face prepend)
                                      ("/\\* *\\(TODO.*$\\)" 1 'bcox-todo-face prepend)
                                      ("/\\* *\\(TODO.*\\)\\*/" 1 'bcox-todo-face prepend)))
  (font-lock-add-keywords 'c-mode '(("// *\\(TODO.*$\\)" 1 'bcox-todo-face prepend)
                                    ("/\\* *\\(TODO.*$\\)" 1 'bcox-todo-face prepend)
                                    ("/\\* *\\(TODO.*\\)\\*/" 1 'bcox-todo-face prepend)))
  (font-lock-add-keywords 'python-mode
   '(("# *\\(TODO.*$\\)" 1 'bcox-todo-face prepend)))
  (font-lock-add-keywords 'emacs-lisp-mode
   '(("; *\\(TODO.*$\\)" 1 'bcox-todo-face prepend)))
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq-default display-line-numbers-width-start 500)
#+END_SRC

** Tabs and CR/LF line-endings

You can use display tables to make certain characters display in different faces (or as different characters). I like to create a couple of extra faces and display ~TAB~ and ~CR~ (~\r~) characters specially, so they stand out while editing source code.

#+BEGIN_SRC emacs-lisp
  ;; Display tab characters with an alternate background color, except in Go.
  (progn (make-face 'tab-face)
         (set-face-foreground 'tab-face "#b58900")
         (set-face-background 'tab-face "#073642")
         (set-face-attribute 'tab-face nil :box 't)
         (make-face 'cr-face)
         (set-face-foreground 'cr-face "#b58900")
         (set-face-background 'cr-face "#073642")
         (set-face-attribute 'cr-face nil :box 't)
         (defvar colortab-display-table (make-display-table)
           "Display table for coloring CR and tab characters.")
         (aset colortab-display-table 9
               (vector
                (make-glyph-code 9 'tab-face)
                ))
         (aset colortab-display-table 13
               (vector
                (make-glyph-code 94 'cr-face)
                (make-glyph-code 77 'cr-face)
                ))
         (setq standard-display-table colortab-display-table)
         (defvar go-display-table (make-display-table)
           "Display table for coloring CR characters.")
         (aset go-display-table 13
               (vector
                (make-glyph-code 94 'cr-face)
                (make-glyph-code 77 'cr-face)
                ))
  )
#+END_SRC

** Code Style Settings

#+BEGIN_SRC emacs-lisp
  (c-add-style "cox" '("stroustrup"
                       (indent-tabs-mode nil)
                       (c-basic-offset . 4)
                       (c-tab-always-indent nil)
                       (c-indent-level . +)
                       (c-continued-statement-offset . +)
                       (c-brace-offset . 0)
                       (c-brace-imaginary-offset . 0)
                       (c-argdecl-indent . 0)
                       (c-label-offset . -)
                       (c-offsets-alist (comment-intro . 0)
                                        (access-label . -3)
                                        (innamespace . 0))))

  (setq-default indent-tabs-mode nil)
  (c-set-offset 'comment-intro 0)
  (require 'cc-vars)
  (setq c-default-style "cox")

  (add-hook 'c-mode-common-hook
            #'(lambda ()
                (setq c-tab-always-indent nil
                      show-trailing-whitespace t
                      indent-tabs-mode nil
                      truncate-lines t)))
  (add-hook 'lisp-interaction-mode-hook
            #'(lambda ()
                (setq c-tab-always-indent nil)))
  (setq rst-indent-comment 4
        rst-indent-field 4
        rst-indent-literal-minimized 4
        rst-indent-literal-normal 4
        rst-indent-width 4)
  (add-hook 'rst-mode-hook
            #'(lambda ()
                (setq indent-tabs-mode nil)))
  (add-hook 'go-mode-hook
            #'(lambda ()
                (setq tab-width 4
                      indent-tabs-mode t
                      buffer-display-table go-display-table)))
#+END_SRC

** Miscellaneous Functions for Editing In Specific Modes

#+BEGIN_SRC emacs-lisp
  ;; This function can be useful in text files;
  ;; I hate files that have whole bunches of newlines at the end.
  (defun fix-file-end ()
    "Remove blank lines from the end of the buffer."
    (interactive)
    (save-excursion
      (goto-char (point-max))
      (delete-blank-lines)
     (forward-line -1)
      (delete-blank-lines))
    (message "Blanks removed from eof."))
  ; C-c C-f is a user key.
  (define-key text-mode-map "\C-c\C-f" 'fix-file-end)

  (defun exit-text-file () "Quit, after killing blank lines from the end."
    (interactive)
    (fix-file-end)
    (save-buffers-kill-emacs))
  ; C-c C-c is a user key.
  (define-key text-mode-map "\C-c\C-c" 'exit-text-file)

  ;; Code usually wants a copyright notice.
  (defun insert-copyright (arg)
    "Insert a copyright notice with the current year.
  With prefix ARG, use that year."
    (interactive "P")
    (let ((current-year (if arg
                            arg
                          (nth 5 (decode-time)))))
      (save-excursion
        (goto-char (point-min))
        (insert
         (format
          bcox-copyright-format
          bcox-copyright-org
          current-year))
        (comment-region (point-min) (point)))))
  (define-key ctl-x-map "\M-c" 'insert-copyright)
#+END_SRC

* Fonts and such
** Global Font-Lock

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode 1)
#+END_SRC

* Miscellaneous Utility Stuff

#+BEGIN_SRC emacs-lisp
  ;; This allows me to just nuke a buffer and the window showing it
  ;; (or frame, if it's the only window in that frame) all in one swell foop.
  (declare-function server-edit "server.el" nil)
  (defun kill-buf-n-win () "Kill the current buffer and its associated window."
    (interactive)
    (if (and (boundp 'server-buffer-clients) server-buffer-clients)
        (server-edit)
      (kill-buffer (current-buffer))
      (condition-case nil
          (delete-window)
        (error (delete-frame)))))
  ; C-x C-k is normally undefined.
  (define-key ctl-x-map "\C-k" 'kill-buf-n-win)

  ;; This allows me to swap the positions of windows on the screen.
  ;; Really it just uses the existing windows and swaps which buffers
  ;; they're displaying, but the effect is the same.  The selected
  ;; buffer stays the same (meaning that the cursor is now in the
  ;; new window on the screen).  Repeated calls to this function will
  ;; move a buffer around through the window list, like a bubblesort.
  (defun swap-windows () "Swap this window and the next one."
    (interactive)
    (if (one-window-p t)
        (message "You eeediot!")
      (save-excursion
        (let
            ((w1 (selected-window))
             (b1 (current-buffer))
             (w2)
             (b2))
          (other-window 1)
          (setq w2 (selected-window))
          (setq b2 (current-buffer))
          (select-window w1)
          (switch-to-buffer b2)
          (select-window w2)
          (switch-to-buffer b1)))))
  ; C-c w is a user key.
  (global-set-key "\C-cw" 'swap-windows)
  (global-set-key "\C-cq" 'bury-buffer)

  ;; https://stackoverflow.com/questions/19054228/emacs-disable-theme-background-color-in-terminal
  (defun set-background-for-terminal (&optional frame)
    (or frame (setq frame (selected-frame)))
    "unsets the background color in terminal mode"
    (unless (display-graphic-p frame)
      (set-face-background 'default "unspecified-bg" frame)))
  (add-hook 'after-make-frame-functions 'set-background-for-terminal)
  (add-hook 'window-setup-hook 'set-background-for-terminal)
#+END_SRC

* SSH and Mosh

#+BEGIN_SRC emacs-lisp
  (declare-function term-mode "term.el" nil)
  (declare-function term-char-mode "term.el" nil)
  (defun mosh (args)
    "Connect to a remote host with mosh, prompting in minibuffer for ARGS."
    (interactive
     (list (read-from-minibuffer "mosh " nil nil nil 'my-mosh-history)))
    (let* ((switches (split-string-and-unquote args))
           (name (concat "mosh " args))
           (termbuf (apply 'make-term name "/usr/bin/mosh" nil switches)))
      (set-buffer termbuf)
      (term-mode)
      (term-char-mode)
      (switch-to-buffer termbuf)))

  (defun ssh (args)
    "Connect to a remote host with ssh, prompting in minibuffer for ARGS."
    (interactive
     (list (read-from-minibuffer "ssh " nil nil nil 'my-ssh-history)))
    (let* ((switches `("-A" . ,(split-string-and-unquote args)))
           (name (concat "ssh " args))
           (termbuf (apply 'make-term name "/usr/bin/ssh" nil switches)))
      (set-buffer termbuf)
      (term-mode)
      (term-char-mode)
      (switch-to-buffer termbuf)))
#+END_SRC

* Key Bindings

Some random key preferences.

#+BEGIN_SRC emacs-lisp
  (bind-keys*
    ("C-x C-b" . ibuffer)
    ("C-x f" . auto-fill-mode)
    ;; ("M-o" . overwrite-mode)
    ("C-x %" . query-replace-regexp)
    ("<delete>" . delete-char)
    ("<end>" . end-of-line)
    ("<home>" . beginning-of-line)
    ("<C-end>" . end-of-buffer)
    ("<C-home>" . beginning-of-buffer)
    ("<C-M-left>" . pop-global-mark)
    ("<M-down>" . (lambda (arg) (interactive "p") (scroll-up arg)))
    ("<M-up>" . (lambda (arg) (interactive "p") (scroll-down arg)))
    ("<C-tab>" . indent-rigidly)
    ("C-c C-k" . compile)
    ("<f3>" . 'isearch-repeat-forward)
    ("<S-f3>" . 'isearch-repeat-backward)
    ("<C-f4>" . delete-frame)
    ("<f5>" . compile)
    ("<S-f5>" . recompile)
    ("<f6>" . make-frame-command)
    ("<S-f6>" . delete-frame)
    ("<f7>" . next-error)
    ("<S-f7>" . previous-error)
    ("<f9>" . speedbar-get-focus)
    ("s-." . speedbar-get-focus)
    ("s-s" . speedbar)
    ("C-x t" . toggle-truncate-lines)
    ("C-x g" . magit-status))
  (bind-keys :map text-mode-map
    ("C-c f" . fundamental-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Setup some key preferences.
  (defun set-n-columns (n)
    "Make the current frame N columns wide."
    (interactive "p")
    (if (= n 1) (setq n 100))
    (modify-frame-parameters (selected-frame) (list (cons 'width n))))
  (defun set-n-rows (n)
    "Make the current frame N rows high."
    (interactive "p")
    (if (= n 1) (setq n 50))
    (modify-frame-parameters (selected-frame) (list (cons 'height n))))

  (define-key ctl-x-map "\C-n" 'set-n-columns)
  (define-key ctl-x-map "\C-h" 'set-n-rows)
#+END_SRC

* Epilogue

#+BEGIN_SRC emacs-lisp
  ;;; emacs-config.org ends here
#+END_SRC

#+STARTUP: showall
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+PROPERTY: header-args :results silent
